Collections and Data Structures: 
Similar data can often be handled more efficiently when stored and manipulated as a collection.

There are two main types of collections; generic collections and non-generic collections. 

Generic collections are type-safe at compile time. Because of this, generic collections typically offer better performance. Generic collections accept a type parameter when they're constructed. They don't require that you cast to and from the Object type when you add or remove items from the collection. In addition, most generic collections are supported in Windows Store apps. 

Non-generic collections store items as Object, require casting, and most aren't supported for Windows Store app development. However, you might see non-generic collections in older code.

Common collection features
All collections provide methods for adding, removing, or finding items in the collection. In addition, all collections that directly or indirectly implement the ICollection interface or the ICollection<T> interface share these features:
  1. The ability to enumerate the collection
  2. The ability to copy the collection contents to an array

In addition, many collection classes contain the following features:
  1. Capacity and Count properties
  2. A consistent lower bound
  3. Synchronization for access from multiple threads (System.Collections classes only).

Choose a collection
  1. Mutable | Amortized | Worst Case
  2. Stack<T>.Push: O(1) O(n) 
  3. Queue<T>.Enqueue: O(1) O(n)
  4. List<T>.Add: O(1)	O(n)	
  5. List<T>.Item[Int32]:	O(1)	O(1)
  6. List<T>.Enumerator:	O(n)	O(n)
  7. HashSet<T>.Add, lookup:	O(1)	O(n)
  8. SortedSet<T>.Add:	O(log n)	O(n)
  9. Dictionary<T>.Add: O(1)	O(n)	
  10. Dictionary<T> lookup:	O(1)	O(1) â€“ or strictly O(n)	
  11. SortedDictionary<T>.Add	O(log n)	O(n log n)

Immutable | Complexity
1. ImmutableStack<T>.Push: O(1)
2. ImmutableQueue<T>.Enqueue:	O(1)
3. ImmutableList<T>.Add:	O(log n)
4. ImmutableList<T>.Item[Int32]:	O(log n)
5. ImmutableList<T>.Enumerator: O(n)
6. ImmutableHashSet<T>.Add: O(log n)
7. ImmutableSortedSet<T>.Add: O(log n)
8. ImmutableDictionary<T>.Add: O(log n)
9. ImmutableDictionary<T> lookup: O(log n)
10.ImmutableSortedDictionary<T>.Add: O(log n)

Commonly used collection types:
Collection types represent different ways to collect data, such as hash tables, queues, stacks, bags, dictionaries, and lists.
All collections are based on the ICollection or ICollection<T> interfaces, either directly or indirectly. IList and IDictionary and their generic counterparts all derive from these two interfaces.

In collections based on IList or directly on ICollection, every element contains only a value. 
These types include:
  1. Array
  2. ArrayList
  3. List<T>
  4. Queue
  5. ConcurrentQueue<T>
  6. Stack
  7. ConcurrentStack<T>
  8. LinkedList<T>
  
In collections based on the IDictionary interface, every element contains both a key and a value. These types include:
  1. Hashtable
  2. SortedList
  3. SortedList<TKey,TValue>
  4. Dictionary<TKey,TValue>
  5. ConcurrentDictionary<TKey,TValue>
  
The KeyedCollection<TKey,TItem> class is unique because it is a list of values with keys embedded within the values. As a result, it behaves both like a list and like a dictionary.
When you need efficient multi-threaded collection access, use the generic collections in the System.Collections.Concurrent namespace.
The Queue and Queue<T> classes provide first-in-first-out lists. The Stack and Stack<T> classes provide last-in-first-out lists.

Strong typing:
Generic collections are the best solution to strong typing. For example, adding an element of any type other than an Int32 to a List<Int32> collection causes a         compile-time error. However, if your language does not support generics, the System.Collections namespace includes abstract base classes that you can extend to create collection classes that are strongly typed. 
These base classes include:
  1. CollectionBase
  2. ReadOnlyCollectionBase
  3. DictionaryBase

How collections vary:
Collections vary in how they store, sort, and compare elements, and how they perform searches.
The SortedList class and the SortedList<TKey,TValue> generic class provide sorted versions of the Hashtable class and the Dictionary<TKey,TValue> generic class.
All collections use zero-based indexes except Array, which allows arrays that are not zero-based.
You can access the elements of a SortedList or a KeyedCollection<TKey,TItem> by either the key or the element's index. You can only access the elements of a           Hashtable or a Dictionary<TKey,TValue> by the element's key.

Use LINQ with collection types:
The LINQ to Objects feature provides a common pattern for accessing in-memory objects of any type that implements IEnumerable or IEnumerable<T>. LINQ queries have     several benefits over standard constructs like foreach loops:
  1. They are concise and easier to understand.
  2. They can filter, order, and group data.
  3. They can improve performance.
