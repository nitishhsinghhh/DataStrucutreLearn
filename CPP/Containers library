The Containers library is a generic collection of class templates and algorithms that allow programmers to easily implement common data structures like queues, 
lists and stacks. There are two (until C++11)three (since C++11) classes of containers:
  A. sequence containers,
  B. associative containers, and
  C. unordered associative containers, (since C++11)
each of which is designed to support a different set of operations.

The container manages the storage space that is allocated for its elements and provides member functions to access them, either directly or through iterators 
(objects with properties similar to pointers).
Most containers have at least several member functions in common, and share functionalities. Which container is the best for the particular application depends not 
only on the offered functionality, but also on its efficiency for different workloads.

A. Sequence containers: Sequence containers implement data structures which can be accessed sequentially.
    
    1. array (C++11)         static contiguous array
                             (class template)
    2. vector                dynamic contiguous array
                             (class template)
    3. deque                 double-ended queue
                             (class template)
    4. forward_list (C++11)  singly-linked list
                             (class template)
    5. list                  doubly-linked list
                             (class template)

B. Associative containers: Associative containers implement sorted data structures that can be quickly searched (O(log n) complexity).

    1. set                   collection of unique keys, sorted by keys
                             (class template)
    2. map                   collection of key-value pairs, sorted by keys, keys are unique
                             (class template)
    3. multiset              collection of keys, sorted by keys
                             (class template)
    4. multimap              collection of key-value pairs, sorted by keys
                             (class template)
                             
C. Unordered associative containers (since C++11): Unordered associative containers implement unsorted (hashed) data structures that can be quickly searched (O(1) 
amortized, O(n) worst-case complexity).

    1. unordered_set (C++11)      collection of unique keys, hashed by keys
                                  (class template)
    2. unordered_map (C++11)      collection of key-value pairs, hashed by keys, keys are unique
                                  (class template)
    3. unordered_multiset (C++11) collection of keys, hashed by keys
                                  (class template)
    4. unordered_multimap (C++11) collection of key-value pairs, hashed by keys
                                  (class template)
Container adaptors: Container adaptors provide a different interface for sequential containers.

  1. stack                  adapts a container to provide stack (LIFO data structure)
                            (class template)
  2. queue                  adapts a container to provide queue (FIFO data structure)
                            (class template)
  3. priority_queue         adapts a container to provide priority queue
                            (class template)
  4. flat_set (C++23)       adapts a container to provide a collection of unique keys, sorted by keys
                            (class template)
  5. flat_map (C++23)       adapts a container to provide a collection of key-value pairs, sorted by unique keys
                            (class template)
  6. flat_multiset (C++23)  adapts a container to provide a collection of keys, sorted by keys
                            (class template)
  7. flat_multimap (C++23)  adapts a container to provide a collection of key-value pairs, sorted by keys
                            (class template)
